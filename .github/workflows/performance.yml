name: 📊 Performance Monitoring & Optimization

on:
  push:
    branches: [ recovery-20250731, main ]
  pull_request:
    branches: [ recovery-20250731, main ]
  schedule:
    # 매일 오전 6시 성능 모니터링 (KST 15시)
    - cron: '0 6 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  LIGHTHOUSE_CI_TOKEN: ${{ secrets.LIGHTHOUSE_CI_TOKEN }}

jobs:
  # 🏗️ 빌드 성능 분석
  build-performance:
    name: 🏗️ Build Performance Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: 🏗️ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 고급 캐싱 전략 (2025 최적화)
      - name: 🚀 Performance-Optimized Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .next/cache
          key: perf-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            perf-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-
            perf-${{ runner.os }}-

      - name: 📥 Install dependencies with timing
        run: |
          echo "::group::Dependency Installation Performance"
          time npm ci --prefer-offline --no-audit
          echo "::endgroup::"
        env:
          HUSKY: 0

      # 빌드 성능 측정
      - name: ⏱️ Build Performance Test
        run: |
          echo "::group::Build Performance Analysis"
          
          # 빌드 시간 측정
          echo "🏗️ Starting build performance test..."
          START_TIME=$(date +%s)
          
          npm run build:vercel
          
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          
          echo "⏱️ Build completed in: ${BUILD_TIME} seconds"
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
          
          # 번들 크기 분석
          echo "📊 Analyzing bundle sizes..."
          find .next/static -name "*.js" -exec du -sh {} + | sort -hr > bundle-sizes.txt
          cat bundle-sizes.txt
          
          # 메모리 사용량 분석
          echo "💾 Memory usage during build:"
          free -h
          
          echo "::endgroup::"

      # 번들 분석기 실행
      - name: 📈 Bundle Analyzer
        run: |
          echo "::group::Bundle Analysis"
          ANALYZE=true npm run build
          echo "::endgroup::"
        continue-on-error: true

      # 성능 메트릭 수집
      - name: 📊 Collect Performance Metrics
        run: |
          echo "::group::Performance Metrics Collection"
          
          # JavaScript 번들 크기
          MAIN_BUNDLE_SIZE=$(find .next/static/chunks -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
          CSS_BUNDLE_SIZE=$(find .next/static/css -name "*.css" -exec wc -c {} + | tail -1 | awk '{print $1}' || echo "0")
          
          echo "📦 Main JS Bundle: $(($MAIN_BUNDLE_SIZE / 1024)) KB"
          echo "🎨 CSS Bundle: $(($CSS_BUNDLE_SIZE / 1024)) KB"
          echo "⏱️ Build Time: $BUILD_TIME seconds"
          
          # GitHub에 메트릭 전달
          echo "MAIN_BUNDLE_KB=$(($MAIN_BUNDLE_SIZE / 1024))" >> $GITHUB_ENV
          echo "CSS_BUNDLE_KB=$(($CSS_BUNDLE_SIZE / 1024))" >> $GITHUB_ENV
          
          echo "::endgroup::"

      # 성능 보고서 생성
      - name: 📋 Generate Performance Report
        uses: actions/github-script@v7
        with:
          script: |
            const buildTime = process.env.BUILD_TIME;
            const mainBundleKB = process.env.MAIN_BUNDLE_KB;
            const cssBundleKB = process.env.CSS_BUNDLE_KB;
            
            const report = `
            ## 🚀 Build Performance Report
            
            ### ⏱️ Build Metrics
            - **Build Time**: ${buildTime} seconds
            - **Main JS Bundle**: ${mainBundleKB} KB
            - **CSS Bundle**: ${cssBundleKB} KB
            - **Node.js Version**: ${process.env.NODE_VERSION}
            - **Build Date**: ${new Date().toISOString()}
            
            ### 📊 Performance Status
            ${buildTime < 120 ? '🟢 Excellent' : buildTime < 300 ? '🟡 Good' : '🔴 Needs Optimization'}
            
            ### 🎯 Optimization Suggestions
            ${mainBundleKB > 500 ? '- Consider code splitting for large bundles\n' : ''}
            ${buildTime > 300 ? '- Review dependencies and build process\n' : ''}
            - Enable incremental builds for faster CI
            - Use build cache for repeated builds
            `;
            
            console.log(report);
            core.summary.addRaw(report);
            await core.summary.write();

      # 성능 아티팩트 업로드
      - name: 📤 Upload Performance Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.sha }}
          path: |
            bundle-sizes.txt
            .next/analyze/
          retention-days: 30

  # 🌐 Lighthouse 성능 테스트
  lighthouse-performance:
    name: 🌐 Lighthouse Performance Test
    runs-on: ubuntu-latest
    needs: build-performance
    if: github.event_name != 'schedule' # 스케줄 실행 시 제외
    steps:
      - uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --prefer-offline
        env:
          HUSKY: 0

      # 프로덕션 빌드
      - name: 🏗️ Build for production
        run: npm run build:vercel

      # 로컬 서버 시작
      - name: 🚀 Start production server
        run: |
          npm start &
          echo "SERVER_PID=$!" >> $GITHUB_ENV
          sleep 10
        timeout-minutes: 2

      # Lighthouse CI 실행
      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      # Web Vitals 측정
      - name: 📊 Web Vitals Assessment
        uses: actions/github-script@v7
        with:
          script: |
            // Web Vitals 임계값
            const thresholds = {
              fcp: 1800,      // First Contentful Paint
              lcp: 2500,      // Largest Contentful Paint
              cls: 0.1,       // Cumulative Layout Shift
              fid: 100,       // First Input Delay
              tbt: 200        // Total Blocking Time
            };
            
            console.log('🎯 Web Vitals Thresholds:');
            console.log('- FCP (First Contentful Paint): < 1.8s');
            console.log('- LCP (Largest Contentful Paint): < 2.5s');
            console.log('- CLS (Cumulative Layout Shift): < 0.1');
            console.log('- FID (First Input Delay): < 100ms');
            console.log('- TBT (Total Blocking Time): < 200ms');

      # 서버 정리
      - name: 🧹 Cleanup server
        run: |
          if [ -n "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

  # 🔄 성능 회귀 테스트
  performance-regression:
    name: 🔄 Performance Regression Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 이전 성능 데이터와 비교
      - name: 📊 Performance Comparison
        uses: actions/github-script@v7
        with:
          script: |
            // PR에서 성능 회귀 검사 로직
            const { execSync } = require('child_process');
            
            try {
              // 기준 브랜치로 체크아웃하여 빌드 시간 측정
              console.log('📊 Comparing performance with base branch...');
              
              // 현재 PR의 변경사항 분석
              const changedFiles = execSync('git diff --name-only HEAD~1').toString().split('\n').filter(f => f);
              const hasSignificantChanges = changedFiles.some(file => 
                file.includes('package.json') || 
                file.includes('next.config.js') ||
                file.includes('src/') ||
                file.includes('pages/')
              );
              
              if (hasSignificantChanges) {
                core.notice('🔍 Significant changes detected - performance impact analysis recommended');
              } else {
                core.notice('✅ Minor changes detected - minimal performance impact expected');
              }
              
            } catch (error) {
              console.log('Performance comparison skipped:', error.message);
            }

  # 📈 성능 모니터링 대시보드
  performance-dashboard:
    name: 📈 Performance Dashboard Update
    runs-on: ubuntu-latest
    needs: [build-performance, lighthouse-performance]
    if: always() && github.ref == 'refs/heads/recovery-20250731'
    steps:
      - uses: actions/checkout@v4

      # 성능 메트릭 수집
      - name: 📥 Collect Performance Data
        uses: actions/download-artifact@v4
        with:
          pattern: performance-report-*
          merge-multiple: true

      # 성능 트렌드 분석
      - name: 📊 Performance Trend Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const performanceData = {
              timestamp: new Date().toISOString(),
              buildTime: process.env.BUILD_TIME || 'N/A',
              mainBundleKB: process.env.MAIN_BUNDLE_KB || 'N/A',
              cssBundleKB: process.env.CSS_BUNDLE_KB || 'N/A',
              commit: context.sha.substring(0, 7),
              branch: 'recovery-20250731'
            };
            
            console.log('📈 Performance Metrics Collected:');
            console.log(JSON.stringify(performanceData, null, 2));
            
            // 성능 알림 (임계값 초과 시)
            if (performanceData.buildTime > 300) {
              core.warning(`⚠️ Build time exceeded 5 minutes: ${performanceData.buildTime}s`);
            }
            
            if (performanceData.mainBundleKB > 1000) {
              core.warning(`⚠️ Main bundle size is large: ${performanceData.mainBundleKB}KB`);
            }

      # Slack 성능 알림
      - name: 📢 Performance Status Notification
        if: env.BUILD_TIME > 300
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          text: |
            📊 Performance Alert - VideoPlanet Frontend
            🕐 Build Time: ${{ env.BUILD_TIME }}s (Target: <300s)
            📦 Bundle Size: ${{ env.MAIN_BUNDLE_KB }}KB
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}